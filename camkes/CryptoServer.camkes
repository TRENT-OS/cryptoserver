/*
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

/*
 *  CryptoServer CAmkES Component
 *
 *  to be used as:
 *
 *      #include "CryptoServer/camkes/CryptoServer.camkes"
 *
 *      CryptoServer_COMPONENT_DEFINE(CryptoServer_1)
 *      CryptoServer_COMPONENT_DEFINE(CryptoServer_2)
 *
 */

import <if_OS_Crypto.camkes>;
import <if_OS_Entropy.camkes>;
import <if_OS_Storage.camkes>;

import <CryptoServer/camkes/if_CryptoServer.camkes>;

#include "LibMacros/ForEach.h"


//------------------------------------------------------------------------------


struct CryptoServer_ClientConfig {
    int storageLimit;
    int allowedIds[];
    int handleMgrCapacity;
}

struct CryptoServer_Config {
    CryptoServer_ClientConfig clients[];
}


//------------------------------------------------------------------------------


/*
 * Declare the CryptoServer with a given type name:
 *
 *      CryptoServer_COMPONENT_DEFINE(
 *          <name>
 *      )
 */
#define CryptoServer_COMPONENT_DEFINE( \
    _name_) \
    \
    component _name_ { \
        maybe dataport  Buf                         cryptoServer_port1; \
        maybe dataport  Buf                         cryptoServer_port2; \
        maybe dataport  Buf                         cryptoServer_port3; \
        maybe dataport  Buf                         cryptoServer_port4; \
        maybe dataport  Buf                         cryptoServer_port5; \
        maybe dataport  Buf                         cryptoServer_port6; \
        maybe dataport  Buf                         cryptoServer_port7; \
        maybe dataport  Buf                         cryptoServer_port8; \
        provides        if_CryptoServer             cryptoServer_rpc;   \
        \
        dataport        Buf                         entropy_port; \
        uses            if_OS_Entropy               entropy_rpc; \
        \
        dataport        Buf                         storage_port; \
        uses            if_OS_Storage               storage_rpc; \
        \
        attribute       CryptoServer_Config         cryptoServer_config; \
    }


//------------------------------------------------------------------------------


/*
 * Assign all the non-client interfaces:
 *
 *      CryptoServer_INSTANCE_CONNECT(
 *          <instance>,
 *          <entropy>.<rpc>, <entrop>.<port>,
 *          <storage>.<rpc>, <storage>.<port>
 *      )
 */
#define CryptoServer_INSTANCE_CONNECT( \
    _inst_, \
    _entropy_rpc_, \
    _entropy_port_, \
    _storage_rpc_, \
    _storage_port_) \
    \
    connection  seL4RPCCall \
        _inst_ ## _entropy_rpc( \
            from    _inst_.entropy_rpc, \
            to      _entropy_rpc_ \
        ); \
    connection seL4SharedData \
        _inst_ ## _entropy_port( \
            from    _inst_.entropy_port, \
            to      _entropy_port_ \
        ); \
    connection  seL4RPCCall \
        _inst_ ## _storage_rpc( \
            from    _inst_.storage_rpc, \
            to      _storage_rpc_ \
        ); \
    connection seL4SharedData \
        _inst_ ## _storage_port( \
            from    _inst_.storage_port, \
            to      _storage_port_ \
        );


//------------------------------------------------------------------------------


// Set a single connection; this is used internally
#define CryptoServer_CLIENT_CONNECTOR( \
    _inst_, \
    _unused_, \
    _rpc_, \
    _port_, \
    _num_) \
    \
    connection  seL4RPCCall \
        _inst_ ## crypto_rpc ## _num_( \
            from    _rpc_, \
            to      _inst_.cryptoServer_rpc \
        ); \
    connection seL4SharedData \
        _inst_ ## crypto_port ## _num_ ( \
            from    _port_, \
            to      _inst_.cryptoServer ## _port ## _num_ \
        );


/*
 * Assign all clients via this variadic macro:
 *
 *      CryptoServer_INSTANCE_CONNECT_CLIENTS(
 *          <instance>,
 *          <client0>.<rpc>,  <client0>.<port>,
 *          <client1>.<rpc>,  <client1>.<port>
 *          ....
 *      )
 *
 * NOTE: Can take up to 8 clients.
 *
 */
#define CryptoServer_INSTANCE_CONNECT_CLIENTS( \
    _inst_, \
    ...) \
    \
    FOR_EACH_2P(CryptoServer_CLIENT_CONNECTOR,_inst_,UNUSED,__VA_ARGS__)


//------------------------------------------------------------------------------


// Assign a single badge; this is used internally
#define CryptoServer_BADGE_ASSIGNER( \
    _unused0_, \
    _unused1_, \
    _rpc_, \
    _num_) \
    \
    _rpc_ ## _attributes = _num_;


/*
 * Assign all clients a badge, in the order in which they are connected to the
 * StorageServer instance via CryptoServer_INSTANCE_CONNECT_CLIENTS():
 *
 *      CryptoServer_CLIENT_ASSIGN_BADGE(
 *          <client_rpc>, <ID>
 *      )
 *
 * NOTE: IDs need to start at 1!
 *
 */
#define CryptoServer_CLIENT_ASSIGN_BADGE( \
    _rpc_, \
    _val_) \
    \
    _rpc_ ## _attributes = _val_;


/*
 * Assign badges to a list of clients; badge IDs will start at 1 and then be
 * incremented. Make sure to pass clients in same order as they are passed
 * in the CryptoServer_INSTANCE_CONNECT_CLIENTS() macro:
 *
 *      CryptoServer_CLIENT_ASSIGN_BADGES(
 *          <client0_rpc>,
 *          <client1_rpc>,
 *           ...
 *      )
 *
 * NOTE: Can take up to 8 clients.
 *
 */
#define CryptoServer_CLIENT_ASSIGN_BADGES( \
    ...) \
    \
    FOR_EACH_1P(CryptoServer_BADGE_ASSIGNER,UNUSED,UNUSED,__VA_ARGS__)
