/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */

import <if_OS_Crypto.camkes>;
import <if_OS_EntropySource.camkes>;
import <if_OS_Storage.camkes>;

import "if_CryptoServer.camkes";

struct CryptoServer_ClientConfig {
    int storageLimit;
    int allowedIds[];
}

struct CryptoServer_Config {
    int numClients;
    CryptoServer_ClientConfig clients[];
}

component CryptoServer {
    control;

    // Crypto API interface, interface threads wait for ServerReady
    dataport    Buf                         CryptoLibDataport;
    provides    if_OS_Crypto                CryptoLibServer;

    // CryptoServer interface, interface threads wait for ServerReady
    provides    if_CryptoServer             CryptoServer;

    // For EntropySource
    uses        if_OS_EntropySource         entropySource_rpc;
    dataport    Buf                         entropySource_dp;

    // For underlying storage
    dataport    Buf                         storage_dp;
    uses        if_OS_Storage               storage_rpc;

    // Configure clients connected to CryptoServer
    attribute   CryptoServer_Config         config;

    // Semaphore for synching RPC threads with init process
    has         semaphore                   sem_init;
}
