/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */

import <if_OS_Crypto.camkes>;
import <if_OS_Entropy.camkes>;
import <if_OS_Storage.camkes>;

import <CryptoServer/camkes/if_CryptoServer.camkes>;

struct CryptoServer_ClientConfig {
    int storageLimit;
    int allowedIds[];
}

struct CryptoServer_Config {
    CryptoServer_ClientConfig clients[];
}

//------------------------------------------------------------------------------
// Component

#define DECLARE_COMPONENT_CryptoServer(_name_)                          \
                                                                        \
    component _name_ {                                                  \
        dataport    Buf                         crypto_port;            \
        provides    if_OS_Crypto                crypto_rpc;             \
                                                                        \
        provides    if_CryptoServer             cryptoServer_rpc;       \
                                                                        \
        dataport    Buf                         entropy_port;           \
        uses        if_OS_Entropy               entropy_rpc;            \
                                                                        \
        dataport    Buf                         storage_dp;             \
        uses        if_OS_Storage               storage_rpc;            \
                                                                        \
        attribute   CryptoServer_Config         cryptoServer_config;    \
    }


//------------------------------------------------------------------------------
// Instance Connection

#define CryptoServer_FE_0(WHAT, N,I)
#define CryptoServer_FE_1(WHAT, N,I,R,D,S)      WHAT(N,I,R,D,S,1)
#define CryptoServer_FE_2(WHAT, N,I,R,D,S, ...) WHAT(N,I,R,D,S,2) \
    CryptoServer_FE_1(WHAT, N,I, __VA_ARGS__)
#define CryptoServer_FE_3(WHAT, N,I,R,D,S, ...) WHAT(N,I,R,D,S,3) \
    CryptoServer_FE_2(WHAT, N,I, __VA_ARGS__)
#define CryptoServer_FE_4(WHAT, N,I,R,D,S, ...) WHAT(N,I,R,D,S,4) \
    CryptoServer_FE_3(WHAT, N,I, __VA_ARGS__)
#define CryptoServer_FE_5(WHAT, N,I,R,D,S, ...) WHAT(N,I,R,D,S,5) \
    CryptoServer_FE_4(WHAT, N,I, __VA_ARGS__)
#define CryptoServer_FE_6(WHAT, N,I,R,D,S, ...) WHAT(N,I,R,D,S,6) \
    CryptoServer_FE_5(WHAT, N,I, __VA_ARGS__)
#define CryptoServer_FE_7(WHAT, N,I,R,D,S, ...) WHAT(N,I,R,D,S,7) \
    CryptoServer_FE_6(WHAT, N,I, __VA_ARGS__)
#define CryptoServer_FE_8(WHAT, N,I,R,D,S, ...) WHAT(N,I,R,D,S,8) \
    CryptoServer_FE_7(WHAT, N,I, __VA_ARGS__)
#define CryptoServer_GET_MACRO(_0,                      \
    _10,_11,_12,_20,_21,_22,_30,_31,_32,_40,_41,_42,    \
    _50,_51,_52,_60,_61,_62,_70,_71,_72,_80,_81,_82,    \
    NAME,...)                                           \
        CryptoServer_ ## NAME
#define CryptoServer_FOR_EACH(action, _name_, _inst_, ...)          \
  CryptoServer_GET_MACRO(_0,__VA_ARGS__,                            \
    FE_8,FE_8,FE_8,FE_7,FE_7,FE_7,FE_6,FE_6,FE_6,FE_5,FE_5,FE_5,    \
    FE_4,FE_4,FE_4,FE_3,FE_3,FE_3,FE_2,FE_2,FE_2,FE_1,FE_1,FE_1)    \
        (action,_name_,_inst_,__VA_ARGS__)

// Set a single connection
#define CryptoServer_CONNECTION(                            \
    _name_,                                                 \
    _inst_,                                                 \
    _caller_crypto_rpc_,                                    \
    _caller_crypto_dp_,                                     \
    _caller_server_rpc_,                                    \
    _num_)                                                  \
                                                            \
    connection  seL4RPCCall                                 \
        _name_ ## _ ## _inst_ ## crypto_rpc ## _num_ (      \
            from    _caller_crypto_rpc_,                    \
            to      _inst_.crypto_rpc                       \
        );                                                  \
    connection seL4SharedData                               \
        _name_ ## _ ## _inst_ ## crypto_dp ## _num_ (       \
            from    _caller_crypto_dp_,                     \
            to      _inst_.crypto_port                      \
        );                                                  \
    connection  seL4RPCCall                                 \
        _name_ ## _ ## _inst_ ## _rpc ## _num_ (            \
            from    _caller_server_rpc_,                    \
            to      _inst_.cryptoServer_rpc                 \
        );


/*
 * With the macro magic above we can use this macro with more than one
 * client, i.e.,
 *
 *      DECLARE_AND_CONNECT_INSTANCE_CryptoServer(
 *          CryptoServer, CryptoServer
 *          entropySource.entropy_rpc, entropySource.entropy_port,
 *          ramDisk.storage_rpc,       ramDisk.storage_port,
 *          client0.crypto_rpc, client0.crypto_port, client0.cryptoServer_port,
 *          client1.crypto_rpc, client1.crypto_port, client1.cryptoServer_port)
 *
 */
#define DECLARE_AND_CONNECT_INSTANCE_CryptoServer(                              \
    _name_,                                                                     \
    _inst_,                                                                     \
    _entropy_rpc_,                                                              \
    _entropy_dp_,                                                               \
    _storage_rpc_,                                                              \
    _storage_dp_,                                                               \
    ...)                                                                        \
                                                                                \
    component   _name_  _inst_;                                                 \
                                                                                \
    connection  seL4RPCCall                                                     \
        _name_ ## _ ## _inst_ ## _entropy_rpc   (                               \
            from    _inst_.entropy_rpc,                                         \
            to      _entropy_rpc_                                               \
        );                                                                      \
    connection seL4SharedData                                                   \
        _name_ ## _ ## _inst_ ## _entropy_dp (                                  \
            from    _inst_.entropy_port,                                        \
            to      _entropy_dp_                                                \
        );                                                                      \
    connection  seL4RPCCall                                                     \
        _name_ ## _ ## _inst_ ## _storage_rpc   (                               \
            from    _inst_.storage_rpc,                                         \
            to      _storage_rpc_                                               \
        );                                                                      \
    connection seL4SharedData                                                   \
        _name_ ## _ ## _inst_ ## _storage_dp (                                  \
            from    _inst_.storage_dp,                                          \
            to      _storage_dp_                                                \
        );                                                                      \
    CryptoServer_FOR_EACH(CryptoServer_CONNECTION, _name_, _inst_, __VA_ARGS__)


//------------------------------------------------------------------------------
// Assignments for instance

#define ASSIGN_CLIENT_BADGE_CryptoServer(_client_, _server_rpc_, _crypto_rpc_, _val_) \
    _client_._server_rpc_ ## _attributes = _val_;   \
    _client_._crypto_rpc_ ## _attributes = _val_;
