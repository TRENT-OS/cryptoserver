/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */

import <if_ChanMux.camkes>;
import <if_OS_Crypto.camkes>;

import "if_CryptoServer.camkes";

struct disk_info {
    int disk_size;
    int block_size_default;
}

struct clientConfig {
    int storageLimit;
    int allowedIds[];
}

struct serverConfig {
    int numClients;
    clientConfig clients[];
}

component CryptoServer {
    control;

    // Crypto API interface, interface threads wait for ServerReady
    dataport    Buf                         CryptoLibDataport;
    provides    if_OS_Crypto                CryptoLibServer;

    // CryptoServer interface, interface threads wait for ServerReady
    provides    if_CryptoServer             CryptoServer;

    // ChanMux for KeyStore NVM communication
    dataport    Buf                         chanMux_port;
    uses        ChanMuxDriverInf            chanMux_rpc;
    consumes    DataAvailableEvent          chanMux_event_hasData;

    // Configure clients connected to CryptoServer
    attribute   serverConfig                config;

    // Semaphore for synching RPC threads with init process
    has         semaphore                   sem_init;
}
