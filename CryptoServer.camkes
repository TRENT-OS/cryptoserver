/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */

import <seos_if_chanMux.camkes>;
import <seos_if_cryptoApi.camkes>;
import <seos_if_cryptoServer.camkes>;

struct disk_info {
    int disk_size;
    int block_size_default;
}

struct clientConfig {
    int storageLimit;
    int allowedIds[];
}

struct serverConfig {
    int numClients;
    clientConfig clients[];
}

component CryptoServer {
    control;

    // CryptoServer has a set-up phase, only after that clients can use it. We signal
    // "readyness" to all potentially waiting RPC threads so they can wait for that.
    emits       ServerReady                 serverInitDone;
    consumes    ServerReady                 initDone;

    // Crypto API interface, interface threads wait for ServerReady
    dataport    Buf                         SeosCryptoDataport;
    provides    seos_if_cryptoApi           SeosCryptoRpc_Server;

    // CryptoServer interface, interface threads wait for ServerReady
    provides    seos_if_cryptoServer        CryptoServer;

    // ChanMux for KeyStore NVM communication
    dataport    Buf                         chanMuxDataPort;
    uses        ChanMuxDriverInf            ChanMuxRpc;
    consumes    DataAvailableEvent          ChanMuxSignal_dataAvailable;

    // Configure clients connected to CryptoServer
    attribute   serverConfig                config;
}
